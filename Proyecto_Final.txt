Proyecto Final â€“ MÃ³dulo CI/CD
TÃ­tulo: AplicaciÃ³n Cliente-Servidor con Docker, Testing y Despliegue Continuo

1. Objetivo General

Desarrollar una aplicaciÃ³n completa basada en arquitectura cliente-servidor, donde el servidor expone una API REST y el cliente consume dicha API. Toda la aplicaciÃ³n debe estar contenedorizada con Docker y debe contar con pruebas automatizadas, documentaciÃ³n de endpoints, y un despliegue en la nube mediante un servicio de preferencia (Railway, Render, Ngrok, Netlify, etc.).

2. Objetivos EspecÃ­ficos

DiseÃ±ar y construir una API REST funcional usando un framework de backend (Flask o FastAPI).

Desarrollar un cliente web o CLI que consuma la API.

Dockerizar la aplicaciÃ³n completa (cliente + servidor) dentro de un mismo contenedor.

Implementar pruebas automatizadas para cada endpoint usando PyTest, TestClient o AsyncClient.

Documentar la API (Swagger, Redoc, o documentaciÃ³n manual).

Desplegar la aplicaciÃ³n completa en un servicio de hosting o despliegue.

3. Requerimientos TÃ©cnicos

Servidor (API):

Desarrollado con Python usando Flask o FastAPI.

Debe tener mÃ­nimo 3 endpoints CRUD (ejemplo: usuarios, tareas, productos).

Debe incluir manejo de errores y cÃ³digos de estado HTTP.

Debe tener pruebas unitarias o de integraciÃ³n por endpoint.

Cliente:

Puede ser un cliente web simple (HTML + JS + Fetch API) o una interfaz de consola (Python CLI).

Debe consumir al menos 2 endpoints del servidor.

DockerizaciÃ³n:

La aplicaciÃ³n completa debe funcionar dentro de un solo contenedor Docker.

Se debe incluir un Dockerfile funcional con los pasos de instalaciÃ³n, copiado del cÃ³digo y ejecuciÃ³n.

El contenedor debe exponer el puerto necesario (por ejemplo, 8000 o 5000).

Pruebas:

Cada endpoint debe tener mÃ­nimo una prueba automatizada.

Las pruebas deben ejecutarse con PyTest o un cliente de prueba (TestClient, AsyncClient).

Despliegue:

La aplicaciÃ³n debe ser desplegada en un servicio gratuito a elecciÃ³n (Railway, Render, Ngrok, etc.).

Se debe entregar la URL pÃºblica de acceso al despliegue.

4. Estructura Sugerida del Proyecto
ðŸ“¦ proyecto-cicd/
â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ main.py              # CÃ³digo de la API
â”‚   â”œâ”€â”€ routes/
â”‚   â”‚   â””â”€â”€ endpoints.py     # Endpoints principales
â”‚   â””â”€â”€ models/
â”‚       â””â”€â”€ data.py          # Estructuras o clases
â”œâ”€â”€ client/
â”‚   â””â”€â”€ client_app.py        # CÃ³digo del cliente
â”œâ”€â”€ tests/
â”‚   â””â”€â”€ test_endpoints.py    # Pruebas automatizadas
â”œâ”€â”€ requirements.txt
â”œâ”€â”€ Dockerfile
â”œâ”€â”€ README.md
â””â”€â”€ Docs.txt                 # DocumentaciÃ³n

5. Entregables

* CÃ³digo fuente completo del proyecto.

* Archivo Dockerfile funcional.

* Carpeta tests con pruebas automatizadas exitosas.

* DocumentaciÃ³n de la API (/docs o manual en README.md).

* URL pÃºblica del despliegue funcional.

Capturas de pantalla o video corto mostrando el flujo completo.

7. Criterios de EvaluaciÃ³n

API funcional y estructurada	20%
Cliente funcional que consuma la API	15%
Pruebas automatizadas exitosas	20%
Dockerfile y contenedor funcional	20%
Despliegue en servicio externo	15%
DocumentaciÃ³n y presentaciÃ³n	10%

8. Observaciones

Los estudiantes pueden usar Railway, Render, Ngrok o cualquier otro servicio de despliegue gratuito.

Se valorarÃ¡ el uso de GitHub Actions para automatizar pruebas y construcciÃ³n de la imagen.

Se recomienda incluir un archivo README.md con instrucciones claras para ejecutar el proyecto.

9. Otros

Los grupos pueden ser de max 3 estudiantes.

La fecha de entrega es 18/10/2025

Debe entregar el repositorio con el proyecto.
