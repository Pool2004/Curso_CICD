Proyecto Final ‚Äì M√≥dulo CI/CD
T√≠tulo: Aplicaci√≥n Cliente-Servidor con Docker, Testing y Despliegue Continuo

1. Objetivo General

Desarrollar una aplicaci√≥n completa basada en arquitectura cliente-servidor, donde el servidor expone una API REST y el cliente consume dicha API. Toda la aplicaci√≥n debe estar contenedorizada con Docker y debe contar con pruebas automatizadas, documentaci√≥n de endpoints, y un despliegue en la nube mediante un servicio de preferencia (Railway, Render, Ngrok, Netlify, etc.).

2. Objetivos Espec√≠ficos

Dise√±ar y construir una API REST funcional usando un framework de backend (Flask o FastAPI).

Desarrollar un cliente web o CLI que consuma la API.

Dockerizar la aplicaci√≥n completa (cliente + servidor) dentro de un mismo contenedor.

Implementar pruebas automatizadas para cada endpoint usando PyTest, TestClient o AsyncClient.

Documentar la API (Swagger, Redoc, o documentaci√≥n manual).

Desplegar la aplicaci√≥n completa en un servicio de hosting o despliegue.

3. Requerimientos T√©cnicos

Servidor (API):

Desarrollado con Python usando Flask o FastAPI.

Debe tener m√≠nimo 3 endpoints CRUD (ejemplo: usuarios, tareas, productos).

Debe incluir manejo de errores y c√≥digos de estado HTTP.

Debe tener pruebas unitarias o de integraci√≥n por endpoint.

Cliente:

Puede ser un cliente web simple (HTML + JS + Fetch API) o una interfaz de consola (Python CLI).

Debe consumir al menos 2 endpoints del servidor.

Dockerizaci√≥n:

La aplicaci√≥n completa debe funcionar dentro de un solo contenedor Docker.

Se debe incluir un Dockerfile funcional con los pasos de instalaci√≥n, copiado del c√≥digo y ejecuci√≥n.

El contenedor debe exponer el puerto necesario (por ejemplo, 8000 o 5000).

Pruebas:

Cada endpoint debe tener m√≠nimo una prueba automatizada.

Las pruebas deben ejecutarse con PyTest o un cliente de prueba (TestClient, AsyncClient).

Despliegue:

La aplicaci√≥n debe ser desplegada en un servicio gratuito a elecci√≥n (Railway, Render, Ngrok, etc.).

Se debe entregar la URL p√∫blica de acceso al despliegue.

4. Estructura Sugerida del Proyecto
üì¶ proyecto-cicd/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ main.py              # C√≥digo de la API
‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ endpoints.py     # Endpoints principales
‚îÇ   ‚îî‚îÄ‚îÄ models/
‚îÇ       ‚îî‚îÄ‚îÄ data.py          # Estructuras o clases
‚îú‚îÄ‚îÄ client/
‚îÇ   ‚îî‚îÄ‚îÄ client_app.py        # C√≥digo del cliente
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îî‚îÄ‚îÄ test_endpoints.py    # Pruebas automatizadas
‚îú‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ README.md
‚îî‚îÄ‚îÄ Docs.txt                 # Documentaci√≥n

5. Entregables

* C√≥digo fuente completo del proyecto. (Repositorio) -> Repositorio

* Archivo Dockerfile funcional. (Dentro del proyecto debe estar el Dockerfile) -> Repositorio

* Carpeta tests con pruebas automatizadas exitosas. (Dentro del proyecto debe estar la carpeta pytest Pytest) -> Repositorio

* Documentaci√≥n de la API (/docs o manual en README.md). -> Pdf

* URL p√∫blica del despliegue funcional. -> Dos url (una del front y la del backend) -> Del servicio desplegado

* Capturas de pantalla o video corto mostrando el flujo completo y funcionamiento. -> Video

( Opcional )

* Que desplieguen su imagen en docker hub y desplegar en producci√≥n con dicha imagen -> Id de su imagen (dockerhub) y screenshot del despliegue de su imagen



7. Criterios de Evaluaci√≥n

API funcional y estructurada	20%
Cliente funcional que consuma la API	20%
Pruebas automatizadas exitosas	20% (porcentaje > 80%)
Dockerfile y docker-compose.yml	20%
Documentaci√≥n y presentaci√≥n	20%

8. Observaciones

Los estudiantes pueden usar Railway, Render, Ngrok, netlify o cualquier otro servicio de despliegue gratuito.

Se recomienda incluir un archivo README.md con instrucciones claras para ejecutar el proyecto.

9. Otros

Los grupos pueden ser de max 3 estudiantes.

La fecha de entrega es 22/10/2025

